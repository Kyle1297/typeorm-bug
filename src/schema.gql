input AddAddressInput {
  """E.g. leave on porch, call on delivery, security codes on entry, etc."""
  additionalNotes: String = ""

  """State, province or region"""
  administrativeArea: String!
  countryCode: String!

  """General instructions for delivery and/or pickup"""
  instructions: AddressInstructionScalar!

  """Street address line 1"""
  line1: String!

  """Street address line 2"""
  line2: String = ""

  """City or town"""
  locality: String!

  """Place or business name"""
  organisationName: String = ""
  postalCode: String!

  """Different address types for customers, workers and their businesses"""
  type: AddressTypeScalar!
}

type Address {
  """E.g. leave on porch, call on delivery, security codes on entry, etc."""
  additionalNotes: String!

  """State, province or region"""
  administrativeArea: String!
  countryCode: String!
  createdAt: DateTime!
  id: ID!

  """General instructions for delivery and/or pickup"""
  instructions: AddressInstructionScalar!

  """Street address line 1"""
  line1: String!

  """Street address line 2"""
  line2: String!

  """City or town"""
  locality: String!

  """Place or business name"""
  organisationName: String!
  postalCode: String!

  """Different address types for customers, workers and their businesses"""
  type: AddressTypeScalar!
  updatedAt: DateTime!
}

"""General instructions for delivery and/or pickup"""
scalar AddressInstructionScalar

"""Different address types for customers, workers and their businesses"""
scalar AddressTypeScalar

type AuthUserResponse {
  token: String!
  user: User!
}

type Business {
  address: Address!
  businessNumber: String!
  createdAt: DateTime!
  id: ID!
  isGstRegistered: Boolean!
  name: String!
  updatedAt: DateTime!
  washer: Washer!
}

type CredentialsTakenError implements ErrorResponse {
  message: String!
  providedEmail: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

interface ErrorResponse {
  message: String!
}

type Image {
  createdAt: DateTime!
  id: ID!
  key: String!
  name: String!
  updatedAt: DateTime!
}

type InputError {
  field: String!
  messages: [String!]!
}

type InvalidCredentialsError implements ErrorResponse {
  message: String!
  providedEmail: String!
}

type InvalidInputError implements ErrorResponse {
  errors: [InputError!]!
  message: String!
}

input LoginSocialInput {
  accessToken: String!
  provider: SocialProviderScalar!
}

union LoginSocialResult = AuthUserResponse | SocialNotRegisteredError

input LoginUserInput {
  email: String!
  password: String!
}

union LoginUserResult = AuthUserResponse | InvalidCredentialsError

type Mutation {
  addAddress(input: AddAddressInput!): Address!
  login(input: LoginUserInput!): [LoginUserResult!]!
  loginSocial(input: LoginSocialInput!): [LoginSocialResult!]!
  register(input: RegisterUserInput!): [RegisterUserResult!]!
  registerSocial(input: RegisterSocialInput!): [RegisterSocialResult!]!
  removeAddress(id: ID!): Address!
  removeCurrentUser: User!
  updateAddress(id: ID!, input: UpdateAddressInput!): Address!
  updateCurrentUserName(input: UpdateUserNameInput!): User!
  updateCurrentUserPhone(input: UpdateUserPhoneInput!): User!
}

type Price {
  aud_in_cents: Float!
  createdAt: DateTime!
  id: ID!
  isPerBag: Boolean!
  updatedAt: DateTime!
}

type Product {
  createdAt: DateTime!
  description: String!
  features: [ProductFeature!]!
  id: ID!
  image: Image!
  name: String!
  price: Price!
  updatedAt: DateTime!
}

type ProductFeature {
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  options: [ProductFeatureOption!]!
  updatedAt: DateTime!
}

type ProductFeatureOption {
  createdAt: DateTime!
  description: String!
  id: ID!
  isDefault: Boolean!
  name: String!
  productFeature: ProductFeature!
  updatedAt: DateTime!
}

type Query {
  currentUser: User!
  product: Product!
  products: [Product!]!
}

input RegisterSocialInput {
  accessToken: String!
  phoneCountryCode: String!
  phoneNumber: String!
  provider: SocialProviderScalar!
}

union RegisterSocialResult = AuthUserResponse | CredentialsTakenError | SocialAlreadyAssignedError

input RegisterUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneCountryCode: String!
  phoneNumber: String!
}

union RegisterUserResult = AuthUserResponse | CredentialsTakenError | InvalidInputError

type SocialAlreadyAssignedError implements ErrorResponse {
  message: String!
  provider: SocialProviderScalar!
}

type SocialNotRegisteredError implements ErrorResponse {
  message: String!
  provider: SocialProviderScalar!
}

type SocialProvider {
  createdAt: DateTime!
  id: ID!
  provider: SocialProviderScalar!
  socialId: String!
  updatedAt: DateTime!
  user: User!
}

"""Social provider type such as facebook or google"""
scalar SocialProviderScalar

input UpdateAddressInput {
  """E.g. leave on porch, call on delivery, security codes on entry, etc."""
  additionalNotes: String

  """State, province or region"""
  administrativeArea: String
  countryCode: String

  """General instructions for delivery and/or pickup"""
  instructions: AddressInstructionScalar

  """Street address line 1"""
  line1: String

  """Street address line 2"""
  line2: String

  """City or town"""
  locality: String

  """Place or business name"""
  organisationName: String
  postalCode: String

  """Different address types for customers, workers and their businesses"""
  type: AddressTypeScalar
}

input UpdateUserNameInput {
  firstName: String!
  lastName: String!
}

input UpdateUserPhoneInput {
  phoneCountryCode: String!
  phoneNumber: String!
}

type User {
  addresses: [Address!]!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  phoneCountryCode: String!
  phoneNumber: String!
  socialProviders: [SocialProvider!]!
  updatedAt: DateTime!
}

type Washer {
  address: Address!
  business: Business!
  createdAt: DateTime!
  firstAbleToWorkAt: DateTime!
  id: ID!
  language: String!
  lastStatusChangeAt: DateTime!

  """The current status of the washer"""
  status: WasherStatusScalar!
  updatedAt: DateTime!
}

"""Different states of a washer"""
scalar WasherStatusScalar
